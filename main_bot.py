#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–∏—è
"""

import logging
import random
import time
from typing import Dict, List, Optional
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

from core.config import Config
from ai.universal_llm import UniversalLLMService
from ai.content_filter import ContentFilter

class OptimizedTelegramBot:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self):
        self.config = Config.load()
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM —Å–µ—Ä–≤–∏—Å–∞
        llm_config = {
            'ai_provider': self.config.ai.ai_provider,
            'persona_name': self.config.persona.name,
            'yandex_api_key': self.config.ai.yandex_api_key,
            'yandex_folder_id': self.config.ai.yandex_folder_id,
            'yandex_model': self.config.ai.yandex_model,
            'openai_api_key': self.config.ai.openai_api_key,
            'openai_base_url': self.config.ai.openai_base_url,
            'openai_model': self.config.ai.openai_model,
            'temperature': self.config.ai.temperature,
            'max_tokens': self.config.ai.max_tokens
        }
        
        self.llm_service = UniversalLLMService(llm_config)
        
        # –§–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_filter = ContentFilter({
            'forbidden_keywords': self.config.filter.forbidden_keywords,
            'forbidden_adult_keywords': self.config.filter.forbidden_adult_keywords,
            'forbidden_obscene_keywords': self.config.filter.forbidden_obscene_keywords
        })
        
        # –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.conversation_history = {}
        self.group_participation = {}
        self.user_last_message = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–∏—è
        self.group_keywords = self.config.group.reply_keywords
        self.min_message_length = self.config.group.min_message_length
        self.max_daily_group_messages = self.config.limits.max_daily_messages_per_group
        
        self.logger.info(f"ü§ñ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω: {self.config.persona.name}")
        self.logger.info(f"üë• –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º: {'üü¢ –í–∫–ª—é—á–µ–Ω' if self.config.group.enabled else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        provider_info = self.llm_service.get_provider_info()
        self.logger.info(f"ü§ñ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_info['type']} ({'–¥–æ—Å—Ç—É–ø–µ–Ω' if provider_info['available'] else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'})")
    
    def start_command(self, update: Update, context: CallbackContext):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        user = update.effective_user
        chat_type = update.effective_chat.type
        
        if chat_type == 'private':
            message = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø {self.config.persona.name} - –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é! üêç

**–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–æ—Å–æ–±–µ–Ω–Ω–æ Python)
‚Ä¢ –û–±—ä—è—Å–Ω—è—é —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö
‚Ä¢ –ü–æ–º–æ–≥–∞—é –≤ –∏–∑—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è

**–ö–æ–º–∞–Ω–¥—ã:**
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üí¨üíª"""
        else:
            message = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø {self.config.persona.name} - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é! üêç

**–í –≥—Ä—É–ø–ø–∞—Ö —è:**
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏
‚Ä¢ –£—á–∞—Å—Ç–≤—É—é –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º
‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å –∫–æ–¥–æ–º –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
‚Ä¢ –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞—é, —á—Ç–æ —è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç

**–£–ø–æ–º–∏–Ω–∞–Ω–∏—è:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @{self.config.bot.username} –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è! üí¨"""
        
        update.message.reply_text(message)
    
    def help_command(self, update: Update, context: CallbackContext):
        """–°–ø—Ä–∞–≤–∫–∞"""
        chat_type = update.effective_chat.type
        
        if chat_type == 'private':
            help_text = f"""ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

**–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:**
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ä–∞–∑–Ω—ã–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
‚Ä¢ –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞—é, —á—Ç–æ —è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å: {self.config.limits.max_daily_messages_per_user}
‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {self.config.limits.min_delay_between_messages} —Å–µ–∫

–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ! üí¨"""
        else:
            help_text = f"""ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤:**

**–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é –≤ –≥—Ä—É–ø–ø–∞—Ö:**
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏
‚Ä¢ –£—á–∞—Å—Ç–≤—É—é –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º
‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å –∫–æ–¥–æ–º –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
‚Ä¢ –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞—é, —á—Ç–æ —è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç

**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è:**
{', '.join(self.group_keywords[:5])}

**–£–ø–æ–º–∏–Ω–∞–Ω–∏—è:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @{self.config.bot.username} –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è! üí¨"""
        
        update.message.reply_text(help_text)
    
    def status_command(self, update: Update, context: CallbackContext):
        """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        provider_info = self.llm_service.get_provider_info()
        
        status_text = f"""üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**

**AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_info['type'].upper()}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –î–æ—Å—Ç—É–ø–µ–Ω' if provider_info['available'] else 'üî¥ –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
‚Ä¢ –ú–æ–¥–µ–ª–∏: {', '.join(provider_info['models'][:3])}

**–ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –í–∫–ª—é—á–µ–Ω' if self.config.group.enabled else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {len(self.group_keywords)} —à—Ç.
‚Ä¢ –ú–∏–Ω. –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {self.min_message_length} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å: {self.max_daily_group_messages}

**–ë–æ—Ç:**
‚Ä¢ –ò–º—è: {self.config.bot.name}
‚Ä¢ Username: @{self.config.bot.username}
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º: {'üü¢ –í–∫–ª—é—á–µ–Ω' if self.config.group.enabled else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}

**–õ–∏–º–∏—Ç—ã:**
‚Ä¢ –ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –¥–µ–Ω—å: {self.config.limits.max_daily_messages_per_user}
‚Ä¢ –ú–∞–∫—Å. —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –≤ –¥–µ–Ω—å: {self.config.limits.max_daily_messages_per_group}
‚Ä¢ –ú–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {self.config.limits.min_delay_between_messages} —Å–µ–∫"""
        
        update.message.reply_text(status_text)
    
    def test_mention_command(self, update: Update, context: CallbackContext):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö"""
        chat_type = update.effective_chat.type
        
        if chat_type == 'private':
            update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ —É–ø–æ–º–∏–Ω–∞—Ç—å –±–æ—Ç–∞
        test_text = f"""üß™ **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π:**

**–°–ø–æ—Å–æ–±—ã —É–ø–æ–º—è–Ω—É—Ç—å –±–æ—Ç–∞:**
1. @{self.config.bot.username} - –ø—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
2. {self.config.bot.name} - –ø–æ –∏–º–µ–Ω–∏
3. "–≠–π, –±–æ—Ç" - –æ–±—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
4. "–ü–æ–º–æ–≥–∏, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç" - –ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏

**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:**
‚Ä¢ @{self.config.bot.username} –ø—Ä–∏–≤–µ—Ç!
‚Ä¢ {self.config.bot.name}, –∫–∞–∫ –¥–µ–ª–∞?
‚Ä¢ –≠–π, –±–æ—Ç, –ø–æ–º–æ–≥–∏ —Å Python
‚Ä¢ –°–ª—É—à–∞–π, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —á—Ç–æ –¥—É–º–∞–µ—à—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏?

**–õ–æ–≥–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π:**
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, –∫–∞–∫ –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
        
        update.message.reply_text(test_text)
    
    def handle_private_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        user_id = str(user.id)
        
        self.logger.info(f"–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id}: {message_text[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content_ok, content_reason, _ = self.content_filter.check_message(message_text)
        if not content_ok:
            update.message.reply_text(f"‚ö†Ô∏è {content_reason}")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if user_id not in self.conversation_history:
                self.conversation_history[user_id] = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.conversation_history[user_id].append({
                'role': 'user',
                'content': message_text,
                'timestamp': time.time()
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(self.conversation_history[user_id]) > 10:
                self.conversation_history[user_id] = self.conversation_history[user_id][-10:]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self.llm_service.generate_conversation_response(
                message_text, 
                self.conversation_history[user_id]
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history[user_id].append({
                'role': 'assistant',
                'content': response,
                'timestamp': time.time()
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            update.message.reply_text(response)
            
            self.logger.info(f"AI –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def handle_group_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        message_text = update.message.text
        chat_id_str = str(chat_id)
        
        self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} –≤ —á–∞—Ç–µ {chat_id}: {message_text[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º
        if not self.config.group.enabled:
            self.logger.debug(f"–ì—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤)
        bot_mentioned = False
        bot_username = self.config.bot.username
        
        # –°–ø–æ—Å–æ–± 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if bot_username and f"@{bot_username}" in message_text:
            bot_mentioned = True
            self.logger.info(f"–ë–æ—Ç —É–ø–æ–º—è–Ω—É—Ç –ø–æ username '{bot_username}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –°–ø–æ—Å–æ–± 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username –∏–∑ context.bot
        elif context.bot.username and f"@{context.bot.username}" in message_text:
            bot_mentioned = True
            self.logger.info(f"–ë–æ—Ç —É–ø–æ–º—è–Ω—É—Ç –ø–æ context username '{context.bot.username}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –°–ø–æ—Å–æ–± 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        elif self.config.bot.name and self.config.bot.name.lower() in message_text.lower():
            bot_mentioned = True
            self.logger.info(f"–ë–æ—Ç —É–ø–æ–º—è–Ω—É—Ç –ø–æ –∏–º–µ–Ω–∏ '{self.config.bot.name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} –≤ —á–∞—Ç–µ {chat_id}")
        
        # –°–ø–æ—Å–æ–± 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é "–±–æ—Ç" –∏–ª–∏ "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"
        elif any(word in message_text.lower() for word in ["–±–æ—Ç", "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "–ø–æ–º–æ—â–Ω–∏–∫"]):
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ
            if any(word in message_text.lower() for word in ["@", "—ç–π", "—Å–ª—É—à–∞–π", "–ø–æ–º–æ–≥–∏", "–æ—Ç–≤–µ—Ç—å"]):
                bot_mentioned = True
                self.logger.info(f"–ë–æ—Ç —É–ø–æ–º—è–Ω—É—Ç –ø–æ –æ–±—â–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} –≤ —á–∞—Ç–µ {chat_id}")
        
        if bot_mentioned:
            self.logger.info(f"üéØ –ë–æ—Ç —É–ø–æ–º—è–Ω—É—Ç! –°–æ–æ–±—â–µ–Ω–∏–µ: '{message_text[:100]}...'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏
        should_participate = self._should_participate_in_group(message_text)
        if should_participate:
            self.logger.info(f"–†–µ—à–µ–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ {chat_id}")
        
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —É–ø–æ–º—è–Ω—É—Ç –∏ –Ω–µ —Å—Ç–æ–∏—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å - –≤—ã—Ö–æ–¥–∏–º
        if not bot_mentioned and not should_participate:
            self.logger.debug(f"–ù–µ —É—á–∞—Å—Ç–≤—É–µ–º –≤ —á–∞—Ç–µ {chat_id}: –±–æ—Ç –Ω–µ —É–ø–æ–º—è–Ω—É—Ç –∏ –Ω–µ—Ç –ø–æ–≤–æ–¥–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø—ã
        if not self._can_participate_in_group(chat_id_str):
            self.logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content_ok, content_reason, _ = self.content_filter.check_message(message_text)
        if not content_ok:
            self.logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —á–∞—Ç–µ {chat_id}: {content_reason}")
            return
        
        self.logger.info(f"–ì—Ä—É–ø–ø–æ–≤–æ–µ —É—á–∞—Å—Ç–∏–µ: {user.id} –≤ —á–∞—Ç–µ {chat_id}")
        
        try:
            if bot_mentioned:
                # –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É
                self.logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}")
                response = self.llm_service.generate_response(message_text)
            else:
                # –£—á–∞—Å—Ç–∏–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏
                self.logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ {chat_id}")
                response = self._generate_group_participation_response(message_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            update.message.reply_text(response)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–∏—è
            self.group_participation[chat_id_str] = self.group_participation.get(chat_id_str, 0) + 1
            
            self.logger.info(f"–ì—Ä—É–ø–ø–æ–≤–æ–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}. –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {self.group_participation[chat_id_str]}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
    
    def _should_participate_in_group(self, message: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–∏"""
        if not message or len(message) < self.min_message_length:
            self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ: {len(message)} < {self.min_message_length}")
            return False
        
        message_lower = message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for keyword in self.group_keywords:
            if keyword.lower() in message_lower:
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–∞
        if "?" in message:
            self.logger.info("–ù–∞–π–¥–µ–Ω –≤–æ–ø—Ä–æ—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞
        tech_keywords = ["python", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—Ñ—É–Ω–∫—Ü–∏—è", "–∫–ª–∞—Å—Å", "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "api", "–≤–µ–±", "—Å–∞–π—Ç", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–º–æ–±–∏–ª—å–Ω–æ–µ", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "data science", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–¥–µ–ø–ª–æ–π", "git", "github", "docker", "kubernetes", "cloud", "aws", "azure", "gcp"]
        for keyword in tech_keywords:
            if keyword in message_lower:
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏
        help_words = ["–ø–æ–º–æ–≥–∏—Ç–µ", "–ø–æ–º–æ–≥–∏", "—Å–æ–≤–µ—Ç", "–≤–æ–ø—Ä–æ—Å", "–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ", "–æ–±—ä—è—Å–Ω–∏—Ç–µ", "–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ—à–∏–±–∫–∞", "–ø—Ä–æ–±–ª–µ–º–∞", "–∑–∞–¥–∞—á–∞", "–ø—Ä–æ–µ–∫—Ç", "–∏–¥–µ—è"]
        for word in help_words:
            if word in message_lower:
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏: {word}")
                return True
        
        self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è: {message[:50]}...")
        return False
    
    def _can_participate_in_group(self, chat_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ"""
        daily_count = self.group_participation.get(chat_id, 0)
        return daily_count < self.max_daily_group_messages
    
    def _generate_group_participation_response(self, message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º –æ–±—Å—É–∂–¥–µ–Ω–∏–∏"""
        message_lower = message.lower()
        
        # –û—Ç–≤–µ—Ç—ã –¥–ª—è —Ç–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        if any(word in message_lower for word in ["python", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"]):
            responses = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! üêç Python –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                "–°–æ–≥–ª–∞—Å–µ–Ω! üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –Ω–∞–≤—ã–∫ –±—É–¥—É—â–µ–≥–æ. –° —á–µ–≥–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ?",
                "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üöÄ Python –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, AI –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –ï—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞?",
                "–ö–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ Python - –º–æ–π –ª—é–±–∏–º—ã–π —è–∑—ã–∫! üòä –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å?",
                "–û—Ç–ª–∏—á–Ω–∞—è —Ç–µ–º–∞! ‚ö° Python —É–Ω–∏–≤–µ—Ä—Å–∞–ª–µ–Ω - –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö AI —Å–∏—Å—Ç–µ–º. –ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç?",
                "–°–æ–≥–ª–∞—Å–µ–Ω! üåü Python - –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ï—Å—Ç—å –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å?"
            ]
            return random.choice(responses)
        
        # –û—Ç–≤–µ—Ç—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        elif "?" in message:
            responses = [
                "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! ü§î –ö–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç.",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üí≠ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ —ç—Ç–æ–π —Ç–µ–º–µ?",
                "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üéØ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –ø–æ–º–æ—á—å.",
                "–õ—é–±–æ–ø—ã—Ç–Ω–æ! üîç –ö–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å —ç—Ç—É —Ç–µ–º—É.",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üí° –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?",
                "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üöÄ –ö–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º."
            ]
            return random.choice(responses)
        
        # –û—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–æ—Å—å–± –æ –ø–æ–º–æ—â–∏
        elif any(word in message_lower for word in ["–ø–æ–º–æ–≥–∏—Ç–µ", "–ø–æ–º–æ–≥–∏", "—Å–æ–≤–µ—Ç", "–≤–æ–ø—Ä–æ—Å", "–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ", "–æ–±—ä—è—Å–Ω–∏—Ç–µ", "–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ—à–∏–±–∫–∞", "–ø—Ä–æ–±–ª–µ–º–∞", "–∑–∞–¥–∞—á–∞", "–ø—Ä–æ–µ–∫—Ç", "–∏–¥–µ—è"]):
            responses = [
                "–ö–æ–Ω–µ—á–Ω–æ! ü§ù –ö–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.",
                "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üí° –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π?",
                "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üöÄ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ.",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ü§î –ö–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "–ö–æ–Ω–µ—á–Ω–æ! üí™ –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                "–ì–æ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å! üåü –ö–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏."
            ]
            return random.choice(responses)
        
        # –û—Ç–≤–µ—Ç—ã –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º
        elif any(word in message_lower for word in ["–≤–µ–±", "—Å–∞–π—Ç", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "api", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "docker", "git", "github", "cloud", "aws", "azure", "gcp", "kubernetes", "devops", "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"]):
            responses = [
                "–û—Ç–ª–∏—á–Ω–∞—è —Ç–µ–º–∞! üåê –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã. –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                "–°–æ–≥–ª–∞—Å–µ–Ω! üöÄ DevOps –∏ –æ–±–ª–∞—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ - —ç—Ç–æ –±—É–¥—É—â–µ–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ï—Å—Ç—å –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞?",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üíª –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ø—Ä–æ—â–∞—é—Ç –∂–∏–∑–Ω—å. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å?",
                "–ö–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ—á–µ–Ω—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã! üòä –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç?",
                "–û—Ç–ª–∏—á–Ω–∞—è –æ–±–ª–∞—Å—Ç—å! ‚ö° –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ —Ä–µ—à–µ–Ω–∏—è. –ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                "–°–æ–≥–ª–∞—Å–µ–Ω! üåü –≠—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –ï—Å—Ç—å –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç?"
            ]
            return random.choice(responses)
        
        # –û—Ç–≤–µ—Ç—ã –¥–ª—è AI/ML —Ç–µ–º
        elif any(word in message_lower for word in ["–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "ai", "ml", "–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å", "–∞–ª–≥–æ—Ä–∏—Ç–º", "data science", "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "tensorflow", "pytorch", "scikit-learn"]):
            responses = [
                "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Ç–µ–º–∞! ü§ñ AI –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –±—É–¥—É—â–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                "–û—Ç–ª–∏—á–Ω–æ! üß† –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –° —á–µ–≥–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –Ω–∞—á–∞—Ç—å?",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üåü AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ. –ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç?",
                "–ö–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç—Ç–∞ –æ–±–ª–∞—Å—Ç—å –æ—á–µ–Ω—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞! üòä –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å?",
                "–û—Ç–ª–∏—á–Ω–∞—è —Ç–µ–º–∞! üöÄ AI –∏ ML –º–µ–Ω—è—é—Ç –º–∏—Ä. –ï—Å—Ç—å –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç?",
                "–°–æ–≥–ª–∞—Å–µ–Ω! üí° –≠—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
            ]
            return random.choice(responses)
        
        # –û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è
        else:
            responses = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! ü§î –ö–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å —ç—Ç—É —Ç–µ–º—É.",
                "–°–æ–≥–ª–∞—Å–µ–Ω! üëç –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ - —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏.",
                "–û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è! üí° –ß—Ç–æ –µ—â–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ?",
                "–ü–æ–Ω—è—Ç–Ω–æ! üéØ –ö–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üåü –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç?",
                "–°–æ–≥–ª–∞—Å–µ–Ω! üí™ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
            ]
            return random.choice(responses)
    
    def handle_message(self, update: Update, context: CallbackContext):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_type = update.effective_chat.type
        
        if chat_type == 'private':
            self.handle_private_message(update, context)
        elif chat_type in ['group', 'supergroup']:
            self.handle_group_message(update, context)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–µ–º updater
            self.updater = Updater(token=self.config.bot.token, use_context=True)
            self.dispatcher = self.updater.dispatcher
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.dispatcher.add_handler(CommandHandler("start", self.start_command))
            self.dispatcher.add_handler(CommandHandler("help", self.help_command))
            self.dispatcher.add_handler(CommandHandler("status", self.status_command))
            self.dispatcher.add_handler(CommandHandler("test_mention", self.test_mention_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, self.handle_message))
            
            self.logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            self.logger.info(f"ü§ñ –ë–æ—Ç @{self.config.bot.username} –∑–∞–ø—É—â–µ–Ω")
            self.logger.info("üì± –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self.updater.start_polling()
            self.updater.idle()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = OptimizedTelegramBot()
    bot.run()

if __name__ == "__main__":
    main()
