"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—â–µ–Ω–∏–µ–º
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
import random
try:
    from ..config import settings  # when importing as src.dialog.manager
    from ..memory.store import store
    from ..nlp.llm_client import llm_client
    from ..moderation.safety import moderator
except Exception:
    from config import settings  # when importing as dialog.manager in tests
    from memory.store import store
    from nlp.llm_client import llm_client
    from moderation.safety import moderator

logger = logging.getLogger(__name__)


class DialogManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—â–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        self.last_messages = {}  # –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä–∞
        
    async def process_private_message(self, user_id: int, message_text: str, 
                                    user_info: Dict[str, Any]) -> Optional[str]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
        Returns:
            Optional[str]: –û—Ç–≤–µ—Ç –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É
        if await store.is_user_paused(user_id):
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞ –ø–∞—É–∑–µ")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        if not await store.check_daily_limit(user_id):
            logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞! üòä"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        is_safe, reason, replacement = moderator.check_message_safety(message_text)
        if not is_safe:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {reason}")
            return replacement
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = await store.get_user_messages(user_id, limit=10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä
        if self._is_repeated_message(user_id, message_text):
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return "–Ø —É–∂–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–æ–∂–µ—Ç, —É —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã? üòä"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
        conversation_history = self._format_conversation_history(messages)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await llm_client.generate_response(
            messages=conversation_history,
            user_info=user_info
        )
        print(response, 'response')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        is_response_safe, _, _ = moderator.check_message_safety(response)
        if not is_response_safe:
            print(is_response_safe, 'is_response_safe')
            response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await store.save_message(user_id, 0, message_text, False)  # –í—Ö–æ–¥—è—â–µ–µ
        await store.save_message(user_id, 0, response, True)       # –ò—Å—Ö–æ–¥—è—â–µ–µ
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        await store.increment_daily_limit(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ
        if not await store.is_assistant_notified(user_id):
            response += "\n\nüí° –ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–±–æ—Ç"
            await store.set_assistant_notified(user_id)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º follow-up
        await self._schedule_follow_up(user_id, user_info, message_text)
        
        return response
    
    def _format_conversation_history(self, messages: List[Dict[str, Any]]) -> List[Dict[str, str]]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM"""
        formatted = []
        
        for msg in messages:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–∞–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            role = "user" if not msg['is_outgoing'] else "assistant"
            formatted.append({
                "role": role,
                "content": msg['text']
            })
        
        return formatted
    
    def _is_repeated_message(self, user_id: int, message_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if user_id not in self.last_messages:
            self.last_messages[user_id] = []
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–æ–º
            self.last_messages[user_id].append(message_text)
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        for last_msg in self.last_messages[user_id][-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
            if self._simple_similarity(message_text, last_msg) > 0.8:
                return True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.last_messages[user_id].append(message_text)
        if len(self.last_messages[user_id]) > 10:
            self.last_messages[user_id] = self.last_messages[user_id][-10:]
        
        return False
    
    def _simple_similarity(self, text1: str, text2: str) -> float:
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤"""
        words1 = set(text1.lower().split())
        words2 = set(text2.lower().split())
        
        if not words1 or not words2:
            return 0.0
        
        intersection = words1.intersection(words2)
        union = words1.union(words2)
        
        return len(intersection) / len(union)
    
    async def _schedule_follow_up(self, user_id: int, user_info: Dict[str, Any], 
                                last_message: str):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (1-3)
        days_ahead = random.randint(
            settings.follow_up_min_days, 
            settings.follow_up_max_days
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω follow-up
        user_name = user_info.get('first_name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        follow_up_text = await llm_client.generate_follow_up(user_name, last_message)
        
        # –°–æ–∑–¥–∞—ë–º follow-up
        await store.create_follow_up(user_id, follow_up_text, days_ahead)
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω follow-up –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ {days_ahead} –¥–Ω–µ–π")
    
    async def process_follow_ups(self) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ follow-up —Å–æ–æ–±—â–µ–Ω–∏—è"""
        pending_follow_ups = await store.get_pending_follow_ups()
        sent_follow_ups = []
        
        for follow_up in pending_follow_ups:
            user_id = follow_up['user_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É
            if await store.is_user_paused(user_id):
                logger.info(f"Follow-up –ø—Ä–æ–ø—É—â–µ–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞ –ø–∞—É–∑–µ")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
            if moderator.is_quiet_hours():
                logger.info(f"Follow-up –æ—Ç–ª–æ–∂–µ–Ω - —Ç–∏—Ö–∏–µ —á–∞—Å—ã")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
            if not await store.check_daily_limit(user_id):
                logger.info(f"Follow-up –æ—Ç–ª–æ–∂–µ–Ω - –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–ª—è {user_id}")
                continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º follow-up
            sent_follow_ups.append({
                'user_id': user_id,
                'message': follow_up['message_template'],
                'follow_up_id': follow_up['id']
            })
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
            await store.increment_daily_limit(user_id)
        
        return sent_follow_ups
    
    async def process_group_message(self, chat_id: int, user_id: int, 
                                  message_text: str, chat_title: str = "") -> Optional[str]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            user_id: ID –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_title: –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        
        Returns:
            Optional[str]: –û—Ç–≤–µ—Ç –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å
        """
        if not settings.enable_group_mode:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≥—Ä—É–ø–ø—ã
        if not moderator.filter_group_message(message_text):
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if not await store.check_group_cooldown(chat_id, user_id):
            logger.info(f"–ì—Ä—É–ø–ø–æ–≤–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω - –∫—É–ª–¥–∞—É–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            return None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = await llm_client.generate_group_response(message_text, chat_title)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        is_safe, _, _ = moderator.check_message_safety(response)
        if not is_safe:
            return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await store.update_group_activity(chat_id, user_id)
        
        return response
    
    async def handle_command(self, user_id: int, command: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        command = command.lower().strip()
        
        if command == '/help':
            return self._get_help_message()
        
        elif command == '/pause':
            await store.set_user_paused(user_id, True)
            return "‚úÖ –û–±—â–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resume –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        
        elif command == '/resume':
            await store.set_user_paused(user_id, False)
            return "‚úÖ –û–±—â–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ! –†–∞–¥ —Å–Ω–æ–≤–∞ —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è üòä"
        
        elif command == '/forget':
            await store.clear_user_history(user_id)
            self.last_messages.pop(user_id, None)
            return "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!"
        
        elif command == '/status':
            return await self._get_status_message(user_id)
        
        else:
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    
    def _get_help_message(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é"""
        return """
ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/pause - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–µ–Ω–∏–µ
/resume - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ–±—â–µ–Ω–∏–µ  
/forget - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üí° **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–±–æ—Ç –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
        """.strip()
    
    async def _get_status_message(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        is_paused = await store.is_user_paused(user_id)
        can_send = await store.check_daily_limit(user_id)
        
        status = "‚è∏Ô∏è –ù–∞ –ø–∞—É–∑–µ" if is_paused else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        limit_status = "‚úÖ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å" if can_send else "‚ùå –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω"
        
        return f"""
üìä **–°—Ç–∞—Ç—É—Å –æ–±—â–µ–Ω–∏—è:**

–°–æ—Å—Ç–æ—è–Ω–∏–µ: {status}
–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {limit_status}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—â–µ–Ω–∏–µ–º.
        """.strip()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤
dialog_manager = DialogManager()

