"""
Telegram –∫–ª–∏–µ–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telethon
"""
import asyncio
import datetime
import logging
from typing import Optional, Dict, Any
from telethon import TelegramClient, events
from telethon.tl.types import User, Chat, Message

from src.reports.generator import ReportGenerator
from ..config import settings
from ..memory.store import store
from ..dialog.manager import dialog_manager

logger = logging.getLogger(__name__)


class TelegramUserbot:
    """Telegram userbot –∫–ª–∏–µ–Ω—Ç"""
    
    def __init__(self):
        self.client = TelegramClient(
            'userbot_session',
            settings.api_id,
            settings.api_hash
        )
        self.me: Optional[User] = None
        
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç"""
        await self.client.start(phone=settings.phone_number)
        self.me = await self.client.get_me()
        logger.info(f"Userbot –∑–∞–ø—É—â–µ–Ω: {self.me.first_name} (@{self.me.username})")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self._register_handlers()
        
    async def run_forever(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É"""
        await self.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É follow-up –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._follow_up_worker())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._report_worker())
        
        logger.info("Userbot —Ä–∞–±–æ—Ç–∞–µ—Ç...")
        await self.client.run_until_disconnected()
    
    def _register_handlers(self):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        
        @self.client.on(events.NewMessage(incoming=True))
        async def handle_new_message(event: events.NewMessage.Event):
            """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
            try:
                await self._process_message(event.message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        @self.client.on(events.MessageEdited(incoming=True))
        async def handle_edited_message(event: events.MessageEdited.Event):
            """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
            try:
                await self._process_message(event.message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _process_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.from_id == self.me.id:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await message.get_chat()
        sender = await message.get_sender()
        
        if not sender:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if isinstance(chat, User):
            await self._handle_private_message(message, sender)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif isinstance(chat, Chat):
            await self._handle_group_message(message, sender, chat)
    
    async def _handle_private_message(self, message: Message, sender: User):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        user_id = sender.id
        message_text = message.text or ""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await store.get_or_create_user(
            user_id=user_id,
            username=sender.username,
            first_name=sender.first_name,
            last_name=sender.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if message_text.startswith('/'):
            response = await dialog_manager.handle_command(user_id, message_text)
            if response:
                await self._send_message(user_id, response)
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = await dialog_manager.process_private_message(
            user_id, message_text, user_info
        )
        
        if response:
            await self._send_message(user_id, response)
    
    async def _handle_group_message(self, message: Message, sender: User, chat: Chat):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if not settings.enable_group_mode:
            return
        
        chat_id = chat.id
        user_id = sender.id
        message_text = message.text or ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if self.me.username and f"@{self.me.username}" in message_text:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏
            await self._send_private_intro(user_id, sender.first_name)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –õ–°
        if any(phrase in message_text.lower() for phrase in ['–≤ –ª—Å', '–≤ –ª–∏—á–∫—É', '–Ω–∞–ø–∏—à–∏ –≤ –ª—Å']):
            await self._send_private_intro(user_id, sender.first_name)
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = await dialog_manager.process_group_message(
            chat_id, user_id, message_text, chat.title
        )
        
        if response:
            await self._send_group_message(chat_id, response)
    
    async def _send_message(self, user_id: int, text: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            await self.client.send_message(user_id, text)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def _send_group_message(self, chat_id: int, text: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
        try:
            await self.client.send_message(chat_id, text)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {chat_id}: {e}")
    
    async def _send_private_intro(self, user_id: int, user_name: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        intro_text = f"""
            –ü—Ä–∏–≤–µ—Ç, {user_name}! üëã

            –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å –æ–±—â–µ–Ω–∏–µ–º. –†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!

            –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å. –¢–∞–∫–∂–µ —É –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã - –∏—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –∏—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.

            –î–æ –≤—Å—Ç—Ä–µ—á–∏! üòä
        """.strip()
        
        await self._send_message(user_id, intro_text)
    
    async def _follow_up_worker(self):
        """–§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ follow-up —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while True:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º follow-up –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                await asyncio.sleep(30 * 60)
                
                follow_ups = await dialog_manager.process_follow_ups()
                
                for follow_up in follow_ups:
                    await self._send_message(
                        follow_up['user_id'], 
                        follow_up['message']
                    )
                    
                    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                    await store.mark_follow_up_sent(follow_up['follow_up_id'])
                    
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω follow-up –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {follow_up['user_id']}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ follow-up worker: {e}")
    
    async def _report_worker(self):
        """–§–æ–Ω–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤"""
        while True:
            try:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
                now = datetime.datetime.now()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:05
                if now.hour == 0 and now.minute == 5:
                    await ReportGenerator.generate_daily_report()
                    logger.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ report worker: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç"""
        await self.client.disconnect()
        logger.info("Userbot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä userbot
userbot = TelegramUserbot()

