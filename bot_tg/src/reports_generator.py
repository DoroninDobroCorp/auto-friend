"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è Telegram userbot.
"""
import logging
from datetime import datetime
from typing import Dict, Any

from .memory.store import store

logger = logging.getLogger(__name__)


class ReportGenerator:
    """–ö–ª–∞—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î —á–µ—Ä–µ–∑ `store.get_daily_stats()` –∏ –ø–∏—à–µ—Ç –∫—Ä–∞—Ç–∫–∏–π
    –æ—Ç—á—ë—Ç –≤ –ª–æ–≥–∏. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–∞–π–ª/–∫–∞–Ω–∞–ª.
    """

    @staticmethod
    async def generate_daily_report() -> None:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç."""
        try:
            stats: Dict[str, Any] = await store.get_daily_stats()
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç
            report_lines = [
                "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç",
                f"–î–∞—Ç–∞: {stats.get('date', datetime.now().date())}",
                f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {stats.get('unique_dialogs', 0)}",
                f"–ò—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('outgoing_messages', 0)}",
                f"Follow-ups —Å–æ–∑–¥–∞–Ω–æ: {stats.get('follow_ups_created', 0)}",
                f"Follow-ups –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.get('follow_ups_sent', 0)}",
                f"Follow-ups –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats.get('follow_ups_delayed', 0)}",
            ]
            report_text = "\n".join(report_lines)
            logger.info(report_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")
