"""
LLM –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
"""
import asyncio
import logging
from typing import List, Dict, Any, Optional
import openai
from tenacity import retry, stop_after_attempt, wait_exponential
from ..config import settings
import httpx


logger = logging.getLogger(__name__)


class LLMClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API"""
    
    def __init__(self):
            PROXY_URL = "socks5://127.0.0.1:800"  # –≤–∞—à —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏
            
            # –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π http –∫–ª–∏–µ–Ω—Ç –¥–ª—è OpenAI
            try:
                # –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π httpx
                transport = httpx.AsyncHTTPTransport(proxy=httpx.Proxy(PROXY_URL))
                async_client = httpx.AsyncClient(transport=transport, trust_env=False)
            except Exception:
                # –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π httpx
                async_client = httpx.AsyncClient(proxies={"all://": PROXY_URL}, trust_env=False)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AsyncOpenAI —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
            self.client = openai.AsyncOpenAI(
                api_key=settings.openai_api_key,
                http_client=async_client
            )
            self.model = settings.openai_model
        
    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))
    async def generate_response(self, 
                              messages: List[Dict[str, str]], 
                              context: str = "",
                              user_info: Dict[str, Any] = None) -> str:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            messages: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role": "user", "content": "..."}]
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = self._build_system_prompt(context, user_info)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ
            full_messages = [{"role": "system", "content": system_prompt}] + messages
            
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=full_messages,
                max_tokens=500,
                temperature=0.7,
                presence_penalty=0.1,
                frequency_penalty=0.1
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    def _build_system_prompt(self, context: str = "", user_info: Dict[str, Any] = None) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        base_prompt = """
–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ, –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ.

–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è:
1. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–º
2. –û—Ç–≤–µ—á–∞–π –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —Ñ–æ—Ä–º–∞–ª—å–Ω–æ
3. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ
4. –ù–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∏–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
5. –ò–∑–±–µ–≥–∞–π –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º
6. –ù–µ —Å–ø–∞–º—å –∏ –Ω–µ —Ä–µ–∫–ª–∞–º–∏—Ä—É–π
7. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–π "—Ç—ã" (–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ)
- –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º
- –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
- –ü–æ–∫–∞–∑—ã–≤–∞–π —ç–º–ø–∞—Ç–∏—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
"""
        
        if context:
            base_prompt += f"\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
        
        if user_info:
            name = user_info.get('first_name', '')
            if name:
                base_prompt += f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}"
        
        return base_prompt
    
    async def generate_follow_up(self, user_name: str, last_topic: str = "") -> str:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å follow-up —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            last_topic: –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        
        Returns:
            str: –¢–µ–∫—Å—Ç follow-up —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        templates = [
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã –ö–∞–∫ –¥–µ–ª–∞?",
            f"–≠–π, {user_name}! –ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ üòä",
            f"–ü—Ä–∏–≤–µ—Ç! {user_name}, –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–µ–Ω—å?",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {user_name}! –ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?",
            f"–ü—Ä–∏–≤–µ—Ç! {user_name}, –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? ‚ú®"
        ]
        
        if last_topic:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–º–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–π
            topic_templates = [
                f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã –ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Å {last_topic}?",
                f"–≠–π, {user_name}! –£–¥–∞–ª–æ—Å—å –ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å {last_topic}?",
                f"–ü—Ä–∏–≤–µ—Ç! {user_name}, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ {last_topic}? üòä"
            ]
            templates.extend(topic_templates)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
        import random
        return random.choice(templates)
    
    async def generate_group_response(self, 
                                    question: str, 
                                    chat_context: str = "") -> str:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã
        
        Args:
            question: –í–æ–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            chat_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
        
        Returns:
            str: –û—Ç–≤–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã
        """
        system_prompt = """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
1. –ü–æ–ª–µ–∑–Ω—ã–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏
2. –ö—Ä–∞—Ç–∫–∏–º–∏ (–Ω–µ –±–æ–ª–µ–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
3. –î—Ä—É–∂–µ–ª—é–±–Ω—ã–º–∏
4. –ù–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–º–∏
5. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –≥—Ä—É–ø–ø—ã

–ò–∑–±–µ–≥–∞–π:
- –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
- –°–ø–∞–º–∞ –∏–ª–∏ —Ä–µ–∫–ª–∞–º—ã
- –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º
- –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö/—é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤
"""
        
        messages = [
            {"role": "user", "content": f"–í–æ–ø—Ä–æ—Å: {question}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞: {chat_context}"}
        ]
        
        return await self.generate_response(messages, system_prompt)
    
    async def check_message_similarity(self, message1: str, message2: str) -> float:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ö–æ–∂–µ—Å—Ç—å –¥–≤—É—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–Ω—Ç–∏-–ø–æ–≤—Ç–æ—Ä–∞)
        
        Args:
            message1: –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message2: –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Returns:
            float: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ (0-1)
        """
        try:
            response = await self.client.embeddings.create(
                model="text-embedding-ada-002",
                input=[message1, message2]
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            embedding1 = response.data[0].embedding
            embedding2 = response.data[1].embedding
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
            similarity = self._cosine_similarity(embedding1, embedding2)
            return similarity
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–æ–∂–µ—Å—Ç–∏: {e}")
            return 0.0
    
    def _cosine_similarity(self, vec1: List[float], vec2: List[float]) -> float:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏"""
        import math
        
        dot_product = sum(a * b for a, b in zip(vec1, vec2))
        magnitude1 = math.sqrt(sum(a * a for a in vec1))
        magnitude2 = math.sqrt(sum(a * a for a in vec2))
        
        if magnitude1 == 0 or magnitude2 == 0:
            return 0.0
        
        return dot_product / (magnitude1 * magnitude2)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä LLM –∫–ª–∏–µ–Ω—Ç–∞
llm_client = LLMClient()

