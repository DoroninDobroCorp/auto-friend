#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
"""

from abc import ABC, abstractmethod
from typing import Optional, Dict, Any, List
import logging

logger = logging.getLogger(__name__)

class LLMProvider(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.is_available_flag = False
        self._test_connection()
    
    @abstractmethod
    def _test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É"""
        pass
    
    @abstractmethod
    def _make_request(self, prompt: str, system_prompt: Optional[str] = None) -> Optional[str]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É"""
        pass
    
    @abstractmethod
    def get_models(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        pass
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return self.is_available_flag
    
    def generate_response(self, prompt: str, context: Optional[Dict[str, Any]] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é LLM"""
        if not self.is_available():
            return self._generate_fallback_response(prompt, context)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = self._format_system_prompt(context)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = self._make_request(prompt, system_prompt)
        
        if response:
            return response
        else:
            return self._generate_fallback_response(prompt, context)
    
    def generate_conversation_response(self, user_message: str, conversation_history: List[Dict[str, str]] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if not conversation_history:
            return self.generate_response(user_message)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        full_prompt = self._format_conversation_prompt(user_message, conversation_history)
        
        return self.generate_response(full_prompt)
    
    def _format_system_prompt(self, context: Optional[Dict[str, Any]] = None) -> Optional[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        if not context or 'persona' not in context:
            return None
        
        persona = context['persona']
        return f"""–¢—ã {persona.get('name', 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç')}, {persona.get('bio', '–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é')}.

–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {persona.get('style', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π')}.
–Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è: {persona.get('language', '—Ä—É—Å—Å–∫–∏–π')}.

–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
1. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ —Ç—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
2. –û—Ç–≤–µ—á–∞–π –ø–æ —Å—É—â–µ—Å—Ç–≤—É –∏ –ø–æ–ª–µ–∑–Ω–æ
3. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
4. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏
5. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö"""
    
    def _format_conversation_prompt(self, user_message: str, conversation_history: List[Dict[str, str]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        full_prompt = ""
        for msg in conversation_history[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg['role'] == 'user' else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
            full_prompt += f"{role}: {msg['content']}\n"
        
        full_prompt += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:"
        return full_prompt
    
    def _generate_fallback_response(self, prompt: str, context: Optional[Dict[str, Any]] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM"""
        prompt_lower = prompt.lower()
        
        # –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
        if "–ø—Ä–∏–≤–µ—Ç" in prompt_lower:
            return "–ü—Ä–∏–≤–µ—Ç! üëã –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ö–∞–∫ –¥–µ–ª–∞?"
        elif "–∫–∞–∫ –¥–µ–ª–∞" in prompt_lower:
            return "–°–ø–∞—Å–∏–±–æ, —É –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ! –ó–∞–Ω–∏–º–∞—é—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞?"
        elif "?" in prompt:
            return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç."
        elif "—Å–ø–∞—Å–∏–±–æ" in prompt_lower:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –†–∞–¥ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º!"
        elif "–ø–æ–∫–∞" in prompt_lower or "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è" in prompt_lower:
            return "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è! üëã"
        else:
            return f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ: '{prompt[:30]}...' –ß—Ç–æ –µ—â–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"

class LLMFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    @staticmethod
    def create_provider(provider_type: str, config: Dict[str, Any]) -> LLMProvider:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —Ç–∏–ø—É"""
        if provider_type == "yandex":
            from ai.yandex_llm import YandexLLMProvider
            return YandexLLMProvider(config)
        elif provider_type == "openai":
            from ai.openai_llm import OpenAILLMProvider
            return OpenAILLMProvider(config)
        elif provider_type == "offline":
            from ai.offline_llm import OfflineLLMProvider
            return OfflineLLMProvider(config)
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {provider_type}")
            from ai.offline_llm import OfflineLLMProvider
            return OfflineLLMProvider(config)
