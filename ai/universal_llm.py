#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π LLM —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
"""

import logging
from typing import Optional, Dict, Any, List
from ai.llm_interface import LLMFactory

logger = logging.getLogger(__name__)

class UniversalLLMService:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.provider = None
        self._initialize_provider()
    
    def _initialize_provider(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        provider_type = self.config.get('ai_provider', 'offline')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        provider_config = {
            'persona_name': self.config.get('persona_name', 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç')
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if provider_type == "yandex":
            provider_config.update({
                'api_key': self.config.get('yandex_api_key'),
                'folder_id': self.config.get('yandex_folder_id'),
                'model': self.config.get('yandex_model', 'yandexgpt-lite')
            })
        elif provider_type == "openai":
            provider_config.update({
                'api_key': self.config.get('openai_api_key'),
                'base_url': self.config.get('openai_base_url'),
                'model': self.config.get('openai_model', 'gpt-3.5-turbo'),
                'temperature': self.config.get('temperature', 0.7),
                'max_tokens': self.config.get('max_tokens', 1000)
            })
        elif provider_type == "gigachat":
            provider_config.update({
                'api_key': self.config.get('gigachat_api_key'),
                'model': self.config.get('gigachat_model', 'GigaChat:latest')
            })
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        try:
            self.provider = LLMFactory.create_provider(provider_type, provider_config)
            logger.info(f"‚úÖ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä '{provider_type}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ '{provider_type}': {e}")
            # Fallback –∫ –æ—Ñ—Ñ–ª–∞–π–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
            self.provider = LLMFactory.create_provider('offline', provider_config)
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM"""
        return self.provider and self.provider.is_available()
    
    def generate_response(self, prompt: str, context: Optional[Dict[str, Any]] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é LLM"""
        if not self.provider:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        
        return self.provider.generate_response(prompt, context)
    
    def generate_conversation_response(self, user_message: str, conversation_history: List[Dict[str, str]] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if not self.provider:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        
        return self.provider.generate_conversation_response(user_message, conversation_history)
    
    def get_provider_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ"""
        if not self.provider:
            return {
                'type': 'none',
                'available': False,
                'models': []
            }
        
        return {
            'type': self.config.get('ai_provider', 'unknown'),
            'available': self.provider.is_available(),
            'models': self.provider.get_models()
        }
    
    def switch_provider(self, provider_type: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            old_provider = self.config.get('ai_provider')
            self.config['ai_provider'] = provider_type
            self._initialize_provider()
            
            if self.provider and self.provider.is_available():
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å —Å '{old_provider}' –Ω–∞ '{provider_type}'")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ '{provider_type}', –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ '{old_provider}'")
                self.config['ai_provider'] = old_provider
                self._initialize_provider()
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
            return False
